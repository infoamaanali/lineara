{"version":3,"file":"Button.js","sourceRoot":"","sources":["Button.ts"],"names":[],"mappings":"","sourcesContent":["// import { ButtonColor } from './Button';\r\nimport type { ReactNode } from \"react\";\r\n\r\n// ✅ Allowed variants\r\nexport type KnownButtonVariants =\r\n  | \"solid\"\r\n  | \"outline\"\r\n  | \"ghost\"\r\n  | \"soft\"\r\n  | \"white\"\r\n  | \"link\";\r\n\r\n// ✅ Allowed colors\r\nexport type KnownButtonColor =\r\n  | \"primary\"\r\n  | \"secondary\"\r\n  | \"success\"\r\n  | \"danger\"\r\n  | \"warning\"\r\n  | \"info\"\r\n  | \"gray\";\r\n\r\nexport type ButtonSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\r\n\r\n// ❌ Error thrower for hex-like values\r\ntype InvalidHex<T> = T extends `#${string}`\r\n  ? {\r\n      ERROR: \"❌ Hex-code string like #000000 is not allowed as a ButtonVariant or use a predefined variant like 'solid', 'outline', etc.\";\r\n      FIX: \"Remove the '#' to make it work.\";\r\n      RECEIVED: T;\r\n    }\r\n  : T;\r\n\r\n// ✅ Final type-safe ButtonVariant\r\nexport type ButtonColor<T = unknown> = T extends KnownButtonColor\r\n  ? T\r\n  : T extends number\r\n  ? T\r\n  : InvalidHex<T>;\r\n\r\n// ✅ Final ButtonProps — generic-aware\r\nexport interface ButtonProps<TVariant = KnownButtonColor> {\r\n  children: ReactNode;\r\n  variant?: ButtonColor<TVariant>;\r\n  color?: ButtonColor;\r\n  size?: ButtonSize;\r\n  pill?: boolean;\r\n  block?: boolean;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  active?: boolean;\r\n  leftIcon?: ReactNode;\r\n  rightIcon?: ReactNode;\r\n  onClick?: () => void;\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n  className?: string;\r\n}"]}