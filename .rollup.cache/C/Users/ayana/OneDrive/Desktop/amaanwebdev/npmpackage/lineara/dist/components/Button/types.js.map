{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/Button/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ReactNode } from \"react\";\r\n\r\n/**\r\n * Predefined preset options that apply a fixed configuration to the button.\r\n */\r\nexport type Preset = \"Logout\" | \"Submit\";\r\n\r\n/**\r\n * Allowed visual styles for the button.\r\n * - `solid`: Filled background.\r\n * - `outline`: Border with transparent background.\r\n * - `ghost`: Transparent button with hover effect.\r\n * - `soft`: Subtle background and text.\r\n * - `white`: White background, often for light themes.\r\n * - `link`: Styled like a hyperlink.\r\n */\r\nexport type KnownButtonVariants =\r\n  | \"solid\"\r\n  | \"outline\"\r\n  | \"ghost\"\r\n  | \"soft\"\r\n  | \"white\"\r\n  | \"link\";\r\n\r\n/**\r\n * Allowed color schemes for the button.\r\n * These usually map to Tailwind colors or design tokens.\r\n */\r\nexport type KnownButtonColor =\r\n  | \"primary\"\r\n  | \"secondary\"\r\n  | \"success\"\r\n  | \"danger\"\r\n  | \"warning\"\r\n  | \"info\"\r\n  | \"gray\";\r\n\r\n/**\r\n * Size variants for the button.\r\n * - `xs`, `sm`, `md`, `lg`, `xl`\r\n */\r\nexport type ButtonSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\r\n\r\n/**\r\n * Utility type to disallow using hex-like strings such as \"#123abc\"\r\n * in props like `variant` or `color`. If such a value is passed,\r\n * the TypeScript compiler will display a helpful error object.\r\n */\r\nexport type InvalidHex<T> = T extends `#${string}`\r\n  ? {\r\n      /** Error message shown in IntelliSense */\r\n      ERROR: \"❌ Hex-like string values (e.g., #123abc) are not allowed.\";\r\n      /** Fix suggestion shown in IntelliSense */\r\n      FIX: \"Use a known name like 'primary', 'solid', or a numeric value.\";\r\n      /** Shows the incorrect value that was passed */\r\n      RECEIVED: T;\r\n    }\r\n  : T;\r\n\r\n/**\r\n * Ensures that only valid button variants are allowed at compile time.\r\n * If an invalid value like a hex string is passed, it returns a helpful error.\r\n */\r\nexport type ButtonVariant<T = unknown> = T extends KnownButtonVariants\r\n  ? T\r\n  : T extends number\r\n  ? T\r\n  : InvalidHex<T>;\r\n\r\n/**\r\n * Ensures that only valid button colors are allowed at compile time.\r\n * If an invalid value like a hex string is passed, it returns a helpful error.\r\n */\r\nexport type ButtonColor<T = unknown> = T extends KnownButtonColor\r\n  ? T\r\n  : T extends number\r\n  ? T\r\n  : InvalidHex<T>;\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                              Preset Button Props                           */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/**\r\n * Button props when using a predefined `preset`.\r\n * All other customization options are forbidden to avoid conflicts.\r\n */\r\ninterface PresetButtonProps {\r\n  /**\r\n   * One of the supported presets, such as \"Logout\" or \"Submit\".\r\n   * When set, the button will use a predefined style and behavior.\r\n   */\r\n  preset: Preset;\r\n\r\n  /**\r\n   * Children (content) inside the button.\r\n   */\r\n  children: ReactNode;\r\n\r\n  /**\r\n   * Optional callback fired when the button is clicked.\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Defines the type of button when used in a form.\r\n   * - `\"button\"` (default): Basic button behavior.\r\n   * - `\"submit\"`: Submits a form.\r\n   * - `\"reset\"`: Resets form fields.\r\n   */\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n\r\n  /**\r\n   * Additional Tailwind utility classes for styling.\r\n   */\r\n  className?: string;\r\n\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  variant?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  color?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  size?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  pill?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  block?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  disabled?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  loading?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  active?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  leftIcon?: never;\r\n  /** ❌ Disallowed when using a preset — avoided for consistency. */\r\n  rightIcon?: never;\r\n}\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                           Fully Customizable Props                         */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/**\r\n * Props for a fully customizable button.\r\n * All design tokens and variants are available here.\r\n */\r\ninterface CustomButtonProps<\r\n  TVariant = KnownButtonVariants,\r\n  TColor = KnownButtonColor\r\n> {\r\n  /**\r\n   * Content to be rendered inside the button.\r\n   */\r\n  children: ReactNode;\r\n\r\n  /**\r\n   * Button style variant (e.g., `solid`, `outline`, `link`).\r\n   * @default \"solid\"\r\n   */\r\n  variant?: ButtonVariant<TVariant>;\r\n\r\n  /**\r\n   * Thematic color for the button (e.g., `primary`, `danger`, `gray`).\r\n   * @default \"primary\"\r\n   */\r\n  color?: ButtonColor<TColor>;\r\n\r\n  /**\r\n   * Controls the overall size of the button.\r\n   * @default \"md\"\r\n   */\r\n  size?: ButtonSize;\r\n\r\n  /**\r\n   * If true, renders the button with fully rounded edges (pill style).\r\n   * @default false\r\n   */\r\n  pill?: boolean;\r\n\r\n  /**\r\n   * If true, the button stretches to fill the width of its parent.\r\n   * @default false\r\n   */\r\n  block?: boolean;\r\n\r\n  /**\r\n   * Disables the button and removes interactivity.\r\n   * @default false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Displays a loading spinner and disables interaction.\r\n   * @default false\r\n   */\r\n  loading?: boolean;\r\n\r\n  /**\r\n   * Applies \"active\" styles to the button.\r\n   * @default false\r\n   */\r\n  active?: boolean;\r\n\r\n  /**\r\n   * Icon or element to render on the left side of the button content.\r\n   */\r\n  leftIcon?: ReactNode;\r\n\r\n  /**\r\n   * Icon or element to render on the right side of the button content.\r\n   */\r\n  rightIcon?: ReactNode;\r\n\r\n  /**\r\n   * Event handler triggered on click.\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Specifies the native HTML button type.\r\n   * @default \"button\"\r\n   */\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n\r\n  /**\r\n   * Additional Tailwind utility classes for custom styling.\r\n   */\r\n  className?: string;\r\n\r\n  /** ❌ `preset` should not be used with fully custom buttons. */\r\n  preset?: never;\r\n}\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                            Final Button Prop Type                          */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/**\r\n * Union of props:\r\n * - Use `preset` mode for opinionated button styles.\r\n * - Use `custom` mode for full flexibility.\r\n *\r\n * Only one mode is allowed per usage.\r\n */\r\nexport type ButtonProps = PresetButtonProps | CustomButtonProps;"]}