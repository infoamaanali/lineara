{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../../src/components/Button/Button.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvC,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAEzE;;;;;;;;GAQG;AACH,MAAM,MAAM,GAAG,UAAU,CACvB,CACE;AACE;;GAEG;AACH,QAAQ,GAAG,kBAAkB;AAE7B;;;GAGG;AACH,OAAO,GAAG,OAAO;AAEjB;;;GAGG;AACH,KAAK,GAAG,SAAS;AAEjB;;;GAGG;AACH,IAAI,GAAG,IAAI;AAEX;;;GAGG;AACH,IAAI,GAAG,KAAK;AAEZ;;;GAGG;AACH,KAAK,GAAG,KAAK;AAEb;;;GAGG;AACH,QAAQ,GAAG,KAAK;AAEhB;;;GAGG;AACH,OAAO,GAAG,KAAK;AAEf;;;GAGG;AACH,MAAM,GAAG,KAAK;AAEd;;GAEG;AACH,QAAQ;AAER;;GAEG;AACH,SAAS;AAET;;GAEG;AACH,OAAO;AAEP;;;GAGG;AACH,IAAI,GAAG,QAAQ;AAEf;;GAEG;AACH,SAAS,GAAG,EAAE;AAEd;;GAEG;AACH,GAAG,KAAK,EACI,EACd,GAAiC,EACjC,EAAE;IACF,yDAAyD;IACzD,MAAM,SAAS,GAAG;QAChB,GAAG,aAAa,EAAE;QAClB,GAAG,aAAa,CAAC,IAAI,CAAC;QACtB,GAAG,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC;QAC9B,GAAG,cAAc,CAAC,KAAK,CAAC;QACxB,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;QAC3C,GAAG,CAAC,QAAQ;YACV,CAAC,CAAC,CAAC,YAAY,EAAE,oBAAoB,EAAE,qBAAqB,CAAC;YAC7D,CAAC,CAAC,EAAE,CAAC;QACP,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnC,SAAS;KACV;SACE,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,GAAG,CAAC,CAAC;IAEb,OAAO,CACL,kBACE,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS,EACpB,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,IAAI,OAAO,KACzB,KAAK,aAER,OAAO,CAAC,CAAC,CAAC;YACT,8BAA8B;YAC9B,KAAC,OAAO,IACN,SAAS,EAAC,cAAc,EACxB,IAAI,EAAE,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAClD,CACH,CAAC,CAAC,CAAC;YACF,iCAAiC;YACjC,QAAQ,IAAI,eAAM,SAAS,EAAC,MAAM,YAAE,QAAQ,GAAQ,CACrD,EAGA,QAAQ,IAAI,yBAAO,QAAQ,GAAQ,EAGnC,CAAC,OAAO,IAAI,SAAS,IAAI,eAAM,SAAS,EAAC,MAAM,YAAE,SAAS,GAAQ,IAC5D,CACV,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC;AAE9B,eAAe,MAAM,CAAC","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport type { ButtonProps } from \"./types\";\r\nimport { getBaseStyles, getVariantStyles } from \"./styles\";\r\nimport { getSizeStyles, getRadiusStyles, getWidthStyles } from \"./utils\";\r\n\r\n/**\r\n * A reusable and customizable Button component with built-in support for:\r\n * - variants (solid, outline, ghost, etc.)\r\n * - color themes (primary, success, danger, etc.)\r\n * - sizes (xs, sm, md, lg, xl)\r\n * - icons (left and right)\r\n * - loading and disabled states\r\n * - pill and block display styles\r\n */\r\nconst Button = forwardRef(\r\n  (\r\n    {\r\n      /**\r\n       * Content rendered inside the button (usually text or an element).\r\n       */\r\n      children = \"Lineara's Button\",\r\n\r\n      /**\r\n       * Visual style of the button (e.g., solid, outline, ghost).\r\n       * @default \"solid\"\r\n       */\r\n      variant = \"solid\",\r\n\r\n      /**\r\n       * Color theme for the button. Only predefined color values are allowed.\r\n       * @default \"primary\"\r\n       */\r\n      color = \"primary\",\r\n\r\n      /**\r\n       * Size of the button (xs, sm, md, lg, xl).\r\n       * @default \"md\"\r\n       */\r\n      size = \"md\",\r\n\r\n      /**\r\n       * If true, renders the button with fully rounded edges.\r\n       * @default false\r\n       */\r\n      pill = false,\r\n\r\n      /**\r\n       * If true, the button expands to the full width of its container.\r\n       * @default false\r\n       */\r\n      block = false,\r\n\r\n      /**\r\n       * If true, the button will be disabled and non-interactive.\r\n       * @default false\r\n       */\r\n      disabled = false,\r\n\r\n      /**\r\n       * If true, shows a loading spinner and disables interaction.\r\n       * @default false\r\n       */\r\n      loading = false,\r\n\r\n      /**\r\n       * If true, applies \"active\" styling to the button.\r\n       * @default false\r\n       */\r\n      active = false,\r\n\r\n      /**\r\n       * Optional icon or element shown before the button content.\r\n       */\r\n      leftIcon,\r\n\r\n      /**\r\n       * Optional icon or element shown after the button content.\r\n       */\r\n      rightIcon,\r\n\r\n      /**\r\n       * Callback triggered when the button is clicked.\r\n       */\r\n      onClick,\r\n\r\n      /**\r\n       * Native button type â€” useful in form contexts.\r\n       * @default \"button\"\r\n       */\r\n      type = \"button\",\r\n\r\n      /**\r\n       * Additional custom Tailwind utility classes.\r\n       */\r\n      className = \"\",\r\n\r\n      /**\r\n       * Additional HTML button attributes.\r\n       */\r\n      ...props\r\n    }: ButtonProps,\r\n    ref: React.Ref<HTMLButtonElement>\r\n  ) => {\r\n    // Compose all utility classes into a single class string\r\n    const allStyles = [\r\n      ...getBaseStyles(),\r\n      ...getSizeStyles(size),\r\n      ...getRadiusStyles(size, pill),\r\n      ...getWidthStyles(block),\r\n      ...getVariantStyles(variant, color, active),\r\n      ...(disabled\r\n        ? [\"opacity-50\", \"cursor-not-allowed\", \"pointer-events-none\"]\r\n        : []),\r\n      ...(loading ? [\"cursor-wait\"] : []),\r\n      className,\r\n    ]\r\n      .filter(Boolean)\r\n      .join(\" \");\r\n\r\n    return (\r\n      <button\r\n        ref={ref}\r\n        type={type}\r\n        className={allStyles}\r\n        onClick={onClick}\r\n        disabled={disabled || loading}\r\n        {...props}\r\n      >\r\n        {loading ? (\r\n          // Render spinner when loading\r\n          <Loader2\r\n            className=\"animate-spin\"\r\n            size={size === \"xs\" ? 14 : size === \"sm\" ? 16 : 18}\r\n          />\r\n        ) : (\r\n          // Render left icon (if provided)\r\n          leftIcon && <span className=\"mr-1\">{leftIcon}</span>\r\n        )}\r\n\r\n        {/* Render button content (children) */}\r\n        {children && <span>{children}</span>}\r\n\r\n        {/* Render right icon (if provided and not loading) */}\r\n        {!loading && rightIcon && <span className=\"ml-1\">{rightIcon}</span>}\r\n      </button>\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = \"Button\";\r\n\r\nexport default Button;"]}