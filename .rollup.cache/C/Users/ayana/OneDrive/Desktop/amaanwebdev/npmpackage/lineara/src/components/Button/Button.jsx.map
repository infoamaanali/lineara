{"version":3,"file":"Button.jsx","sourceRoot":"","sources":["Button.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,EAAE,EAAqB,MAAM,mBAAmB,CAAC;AAE1D;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,OAAO,EAAE,SAAS;IAClB,SAAS,EAAE,SAAS;IACpB,OAAO,EAAE,SAAS;IAClB,MAAM,EAAE,SAAS;IACjB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,IAAI,EAAE,SAAS;CACP,CAAC;AAOX;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,IAAI,EAAE,cAAc;IACpB,EAAE,EAAE,YAAY;IAChB,EAAE,EAAE,YAAY;IAChB,EAAE,EAAE,YAAY;IAChB,EAAE,EAAE,YAAY;IAChB,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE,cAAc;CACZ,CAAC;AAIX;;GAEG;AACH,MAAM,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,EAAE,uFAAuF;IAC7F,QAAQ,EAAE;QACR,OAAO,EAAE;YACP,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,uBAAuB;YAChC,MAAM,EAAE,qCAAqC;YAC7C,MAAM,EAAE,qCAAqC;YAC7C,MAAM,EAAE,yBAAyB;SAClC;QACD,KAAK,EAAE,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CACpB;QAChC,IAAI,EAAE;YACJ,EAAE,EAAE,mBAAmB;YACvB,EAAE,EAAE,qBAAqB;YACzB,EAAE,EAAE,qBAAqB;YACzB,EAAE,EAAE,qBAAqB;YACzB,EAAE,EAAE,mBAAmB;YACvB,GAAG,EAAE,oBAAoB;SAC1B;QACD,SAAS,EAAE,YAAY;QACvB,SAAS,EAAE;YACT,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,QAAQ;SAChB;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,+BAA+B;YACrC,KAAK,EAAE,EAAE;SACV;KACF;IACD,gBAAgB,EAAE;QAChB,0CAA0C;QAC1C,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YACpD,OAAO,EAAE,QAAiB;YAC1B,KAAK,EAAE,GAAkB;YACzB,KAAK,EAAE,CAAC,OAAO,GAAG,GAAG,EAAE,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC,8BAA8B,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SACrH,CAAC,CAAC;QACH,8CAA8C;QAC9C,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CACtD,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC1D,OAAO,EAAE,OAAwB;YACjC,KAAK,EAAE,GAAkB;YACzB,KAAK,EAAE,CAAC,WAAW,GAAG,GAAG,EAAE,SAAS,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SACtD,CAAC,CAAC,CACJ;KACF;IACD,eAAe,EAAE;QACf,OAAO,EAAE,QAAQ;QACjB,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC,CAAC;AAKH,MAAM,MAAM,GAA0B,CAAC,EAUtC,EAAE,EAAE;QAVkC,EACrC,OAAO,EACP,KAAK,EACL,IAAI,EACJ,SAAS,EACT,SAAS,EACT,QAAQ,EACR,SAAS,EACT,QAAQ,OAET,EADI,KAAK,cAT6B,2FAUtC,CADS;IACJ,OAAA,CACJ,CAAC,MAAM,CACL,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CACvF,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,IAAI,KAAK,CAAC,CAEV;IAAA,CAAC,QAAQ,CACX;EAAA,EAAE,MAAM,CAAC,CACV,CAAA;CAAA,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import React from 'react';\r\nimport { tv, type VariantProps } from 'tailwind-variants';\r\n\r\n/**\r\n * Define your color palette as a const so keys are literal types\r\n */\r\nexport const colorVariants = {\r\n  primary: '#2563EB',\r\n  secondary: '#6B7280',\r\n  success: '#16A34A',\r\n  danger: '#DC2626',\r\n  warning: '#D97706',\r\n  info: '#0284C7',\r\n  light: '#F3F4F6',\r\n  dark: '#111827',\r\n} as const;\r\n\r\ntype ButtonVariant = 'normal' | 'outline' | 'dashed' | 'dotted' | 'double';\r\ntype ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\r\n\r\ntype ButtonColor = keyof typeof colorVariants;\r\n\r\n/**\r\n * Corner roundness utilities\r\n */\r\nexport const roundnessMap = {\r\n  none: 'rounded-none',\r\n  xs: 'rounded-xs',\r\n  sm: 'rounded-sm',\r\n  md: 'rounded-md',\r\n  lg: 'rounded-lg',\r\n  xl: 'rounded-xl',\r\n  full: 'rounded-full',\r\n} as const;\r\n\r\ntype ButtonRoundness = keyof typeof roundnessMap;\r\n\r\n/**\r\n * Build the tv() config with strongly-typed variants\r\n */\r\nconst button = tv({\r\n  base: 'inline-flex items-center justify-center font-medium focus:outline-none transition-all',\r\n  variants: {\r\n    variant: {\r\n      normal: '',\r\n      outline: 'border bg-transparent',\r\n      dashed: 'border border-dashed bg-transparent',\r\n      dotted: 'border border-dotted bg-transparent',\r\n      double: 'border-2 bg-transparent',\r\n    },\r\n    color: Object.fromEntries(\r\n      Object.keys(colorVariants).map((key) => [key, ''])\r\n    ) as Record<ButtonColor, string>,\r\n    size: {\r\n      xs: 'text-xs py-1 px-2',\r\n      sm: 'text-sm py-1.5 px-3',\r\n      md: 'text-base py-2 px-4',\r\n      lg: 'text-lg py-2.5 px-5',\r\n      xl: 'text-xl py-3 px-6',\r\n      xxl: 'text-2xl py-4 px-8',\r\n    },\r\n    roundness: roundnessMap,\r\n    fullWidth: {\r\n      true: 'w-full',\r\n      false: 'w-auto',\r\n    },\r\n    disabled: {\r\n      true: 'opacity-50 cursor-not-allowed',\r\n      false: '',\r\n    },\r\n  },\r\n  compoundVariants: [\r\n    // normal variant: background + text color\r\n    ...Object.entries(colorVariants).map(([key, hex]) => ({\r\n      variant: 'normal' as const,\r\n      color: key as ButtonColor,\r\n      class: [`bg-[${hex}]`, key === 'light' ? 'text-[${colorVariants.dark}]' : 'text-[${colorVariants.light}]'].join(' '),\r\n    })),\r\n    // outline/dashed/dotted/double: border + text\r\n    ...Object.entries(colorVariants).flatMap(([key, hex]) =>\r\n      ['outline', 'dashed', 'dotted', 'double'].map((variant) => ({\r\n        variant: variant as ButtonVariant,\r\n        color: key as ButtonColor,\r\n        class: [`border-[${hex}]`, `text-[${hex}]`].join(' '),\r\n      }))\r\n    ),\r\n  ],\r\n  defaultVariants: {\r\n    variant: 'normal',\r\n    color: 'primary',\r\n    size: 'md',\r\n    roundness: 'md',\r\n    fullWidth: false,\r\n    disabled: false,\r\n  },\r\n});\r\n\r\nexport type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> &\r\n  VariantProps<typeof button>;\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  variant,\r\n  color,\r\n  size,\r\n  roundness,\r\n  fullWidth,\r\n  disabled,\r\n  className,\r\n  children,\r\n  ...props\r\n}) => (\r\n  <button\r\n    className={button({ variant, color, size, roundness, fullWidth, disabled, className })}\r\n    disabled={disabled}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport default Button;"]}