{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type { ReactNode } from \"react\";\r\n\r\n/**\r\n * Predefined button variant styles.\r\n */\r\nexport type KnownButtonVariants =\r\n  | \"solid\"\r\n  | \"outline\"\r\n  | \"ghost\"\r\n  | \"soft\"\r\n  | \"white\"\r\n  | \"link\";\r\n\r\n/**\r\n * Predefined color schemes.\r\n */\r\nexport type KnownButtonColor =\r\n  | \"primary\"\r\n  | \"secondary\"\r\n  | \"success\"\r\n  | \"danger\"\r\n  | \"warning\"\r\n  | \"info\"\r\n  | \"gray\";\r\n\r\n/**\r\n * Size options for buttons.\r\n */\r\nexport type ButtonSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\r\n\r\n/**\r\n * Disallows direct hex code strings like \"#123456\" for variant or color.\r\n */\r\nexport type InvalidHex<T> = T extends `#${string}`\r\n  ? {\r\n      ERROR: \"‚ùå Hex-like string values (e.g., #123abc) are not allowed.\";\r\n      FIX: \"Use a known name like 'solid' or a number.\";\r\n      RECEIVED: T;\r\n    }\r\n  : T;\r\n\r\n/**\r\n * Type-safe button variant with compile-time validation.\r\n */\r\nexport type ButtonVariant<T = unknown> =\r\n  T extends KnownButtonVariants ? T : T extends number ? T : InvalidHex<T>;\r\n\r\n/**\r\n * Type-safe button color with compile-time validation.\r\n */\r\nexport type ButtonColor<T = unknown> =\r\n  T extends KnownButtonColor ? T : T extends number ? T : InvalidHex<T>;\r\n\r\n/**\r\n * Props accepted by the Button component.\r\n */\r\nexport interface ButtonProps<TVariant = KnownButtonVariants, TColor = KnownButtonColor> {\r\n  children: ReactNode;\r\n  variant?: ButtonVariant<TVariant>;\r\n  color?: ButtonColor<TColor>;\r\n  size?: ButtonSize;\r\n  pill?: boolean;\r\n  block?: boolean;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  active?: boolean;\r\n  leftIcon?: ReactNode;\r\n  rightIcon?: ReactNode;\r\n  onClick?: () => void;\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n  className?: string;\r\n}"]}